#include<bits/stdc++.h>
using namespace std;
class node{
public:
	int key;
	node* left;
	node* right;
	node (int k)
	{
       left=NULL;
       right=NULL;
       key=k;
	}
};
/*********ek no thought*********/
// save from o(n) space sorted of making an sorted array
void bsttoll(node *root,node* &head)
{  // next is right here
    if(!root)        
    	return;

     bsttoll(root->right,head);
     root->right=head;
     if(head)
     	(head)->left=NULL;
     head=root;
     bsttoll(root->left,head);


}
node * minn(node* root)
{
	 while(root->left)
	 	root=root->left;
	 return root;
}
node* ddelete(node * root,int k){
 
     if(!root)
     	return root;

     if(k<root->key)
     	root->left=ddelete(root->left,k);

     else if(k>root->key)
     	root->right=ddelete(root->right,k);
     else
     {
     	   // no child
     	  if(!root->left and !root->right)
     	  {
     	  	   node* temp=root;
     	  	   delete(root);
     	  	   return NULL;
     	  }
     	  // one child
     	  else if(!root->left)
     	  {
     	  	 node * temp=root->right;
     	  	 delete(root);
     	  	 return temp;

     	  }
     	  else if(!root->right)
     	  {
     	  	   node * temp=root->left;
     	  	 delete(root);
     	  	 return temp;


     	  }
     	  // all child
     	  else
     	  {
     	  	  node * temp=minn(root->right);

     	  	  root->key=temp->key;

     	  	  root->right= ddelete(root->right,temp->key);
                
                return root;

     	  }
     }
     return root;
    

}
void inorder(node * root){

   if(!root)
   	return ;

   inorder(root->left);
   cout<<root->key<<" ";
   inorder(root->right);

}
void insert(node* &root,int k){

	if(!root){
		root=new node(k);return;}
	

	if(k<root->key)
	{
		  if(root->left)
		  	insert(root->left,k);
		  else
		  	{root->left=new node(k); return ;}
	}

	else
	{
		  if(root->right)
		  	insert(root->right,k);
		  else
		  	{root->right=new node(k); return ;}
	}


}
int pre[6]={10,5,1,7,40,50};
void contructfrompre(node * &root)
{
	   stack<node*> st;
	   root=new node(pre[0]);
	   st.push(root);
         node* temp=NULL;
	   for(int i=1;i<6;i++){
           temp=NULL;

           while(!st.empty() and pre[i]>st.top()->key)
           {
           	 temp=st.top();
           	 st.pop();
           }
             // left child
           if(!temp)
           {
               st.top()->left=new node(pre[i]);
               st.push(st.top()->left);
           }
           // right child
           if(temp)
           {
           	    temp->right=new node(pre[i]);
               st.push(temp->right);  
           }
           


	   }
}
void printll(node *head){

 
   while(head){
   	cout<<head->key<<" ";
   	head=head->right;
   }

}
node* convertbsttominheap(node * root,node *head)
{
	  // if(!root)
	  	// return root;
	  queue<node*> q;
	  root=head;
	  q.push(root);
	  head=head->right;

	  while(head){
       
        node* parent=q.front();
        q.pop();

        node* leftt=head;
        head=head->right;
        leftt->right=NULL;
        q.push(leftt);
        parent->left=leftt;

        if(head){
        node* rightt=head;
        head=head->right;
        leftt->right=NULL;
        q.push(rightt);
        parent->right=rightt;
     }
  }
  return root;
}

void leverorder(node * root){

     if(!root)
     	return ;

     queue<node*> q;
     q.push(root);

     while(!q.empty()){

       node* temp=q.front();
       q.pop();
       cout<<temp->key<<" ";

       if(temp->left)
       	q.push(temp->left);
       if(temp->right)
       	q.push(temp->right);

     }

}
vector<int> merge(node* root1,node* root2)
{
	  stack<node*> a,b; 
	  node* A=root1;
	  node* B=root2; 
       vector<int> res;
	  while( (A || !a.empty()) && (B || !b.empty()))
	  {
	  	   while(A)
	  	   {
	  	   	 a.push(A);
	  	   	 A=A->left;
	  	   }

	  	   while(B)
	  	   {
	  	   	 b.push(B);
	  	   	 B=B->left;
	  	   }
           
	  	   A=a.top(); a.pop(); 
	  	   B=b.top(); b.pop();

	  	   if(A->key<B->key)
	  	   	{
                 res.push_back(A->key);
                 A=A->right;
                 b.push(B);
                 B=NULL;
	  	   	}
	  	   else
	  	   	{
                 res.push_back(B->key);
                 B=B->right;
                 a.push(A);
                 A=NULL;
	  	   	}
	  	  
	  }
	  while(B || !b.empty())
	  {
	  	     while(B)
	  	     {
	  	     	  b.push(B);
	  	     	  B=B->left;
	  	     }
	  	     B=b.top();
             b.pop();
             res.push_back(B->key);
             B=B->right;
	  }
	  while(A || !a.empty())
	  {
	  	     while(A)
	  	     {
	  	     	  a.push(A);
	  	     	  A=A->left;
	  	     }
	  	     A=a.top();
             a.pop();
             res.push_back(A->key);
             A=A->right;
	  }
	  return res;
}
void lowerbound(node* root,int n,int &res){

    if(!root)
    	return ;
    if(root->key==n){
    	res=n;
    
    return ;}

    if(root->key<n)
    {
    	if(root->key>res) res=root->key;
    	lowerbound(root->right,n,res);
    }
    else
    {
        // if(root->data>res) res=root->data;
    	lowerbound(root->left,n,res);	
    } 



}
void morristraversal(node* root1){

    if(!root1)
    	return;

    node* cur=root1;

    while(cur){

       if(!cur->left)
       {
       	  cout<<cur->key<<" ";
       	  cur=cur->right;
       }
       else
       {
             node* pre=cur->left;
             while(pre->right and pre->right!=cur){

             	pre=pre->right;
             }

             if(pre->right==NULL){
             	pre->right=cur;
             	cur=cur->left;
             }
             else{
             	pre->right=NULL;
             	cout<<cur->key<<" ";
             	cur=cur->right;
             }

       }

    }


}

int main()
{
	/* Let us create following BST 
              50 
           /     \ 
          30      70 
         /  \    /  \ 
       20   40  60   80 */
    struct node *root1 = NULL; 
    insert(root1, 50); 
    insert(root1, 30); 
    insert(root1, 20); 
    insert(root1, 40); 
    insert(root1, 70); 
    insert(root1, 60); 
    insert(root1, 80);

    morristraversal(root1);
/* Let us create following BST 
              120 
           /     \ 
          100      140 
         /  \    /  \ 
       90   110  130 150 */
    
    // node *root2=NULL;
    // insert(root2, 90); 
    // insert(root2, 100); 
    // insert(root2, 110); 
    // insert(root2, 120); 
    // insert(root2, 130); 
    // insert(root2, 140); 
    // insert(root2, 150);
    // inorder(root);
    // ddelete(root,50);
    // cout<<endl;
    // inorder(root);

    // node* root1=NULL;
    // contructfrompre(root1);
    // inorder(root1);
    // node* head=NULL;
    // bsttoll(root,head);
    // root=NULL;
    // root=convertbsttominheap(root,head);
    // printll(head);
    // leverorder(root);

    // vector<int> v;
    // v=merge(root1,root2);  /* O(H1+H2) space complexity*/

    // for(int i=0;i<v.size();i++)
    	// cout<<v[i]<<" ";

    // int res=-1;
    // lowerbound(root1,60,res);
   
     // cout<<res<<endl;



    

     return 0; 
}