<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;
#define ll long long
const ll MAX =1000000000000000000;
ll mod= 1000000000;
long double pi=3.141592653589793238;
void pls()
{
  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifndef ONLINE_JUDGE
freopen("input.txt", "r", stdin);
//freopen("output.txt", "w", stdout);
#endif
}
// ............................................................
// Returns (a * b) % m
// time complexity is log(b)
ll mul_mod(ll a, ll b, ll m){
		ll x = 0, y = a;
		while (b > 0){
			if(b & 1){
				// No overflows in additons.
				x = (x + y) % m;}
			y = (y + y) % m;
			b >>= 1;}
		return x;
}

// ...........................................................
inline ll modu(ll val , ll modul){return (val%modul+modul)%modul;}
inline int madd(int x,int y){ return (x%mod +y%mod)%mod;}
inline int msub(int x,int y){return (mod+x%mod -y%mod)%mod;}

ll gcd(ll a,ll b){if(b==0) return a;return gcd(b,a%b);}
// x%mod * a%mod  this can be overflow  10^11*10^7 may therefore we need > long long (64 bit)
//  either use incuit int_128 or use upper multiplication with time complexity log b
ll powmod(ll a, ll mod,ll p){ if(p==0) return 1;  ll res; ll x=powmod(a,mod,p/2); res=x;if(p&1) x=mul_mod(x,a,mod);   return mul_mod(x,res,mod);}
ll exp(ll a,ll p){ if(p==0) return 1;  ll res; ll x=exp(a,p/2); res=x;if(p&1) x=(x * a);   return (x * res);}
ll sqt(ll x){  ll l=1LL;  ll r=x;  ll res; while(l<=r){ ll mid=l+(r-l)/2; if(mid*mid<=x){res=mid; l=mid+1;}else r=mid-1;   } return res;}
// sqrt(n)
bool isprime(ll n){   for(int i=2;i<=sqt(n);i++) if(n%i==0)return 0; return 1;}
vector<int> soe(ll upto)
{
	         vector<bool> prime(upto+1,0);
	         prime[1]=1;
	         prime[0]=1;
             for(int i=2;i<=sqt(upto);i++)
             {
                        if(!prime[i])
                        {
                              for(int j=2*i;j<=upto;j+=i)
                              	prime[j]=1;

                        }

             }
             vector<int> res;
             res.push_back(2);
             for(int i=3;i<prime.size();i+=2)
             {
                   if(!prime[i])
                   	 res.push_back(i);
             }
             return res;
}
int di[8]={-1,-1,-1,1,1,1,0,0};
int dj[8]={-1,0,1,-1,0,1,-1,1};
int ii[4]={0,0,-1,1};
int jj[4]={-1,1,0,0}; 
void solve()
{	
			
			 
}
int main(){pls(); solve(); return 0;}
/*
  Mostly wrong answer form base case or overflow or runtime 

*/











]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>tem</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
